% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/until.R
\name{async_until}
\alias{async_until}
\title{Repeatedly call task until it its test function returns \code{TRUE}}
\usage{
async_until(test, task, ...)
}
\arguments{
\item{test}{Synchronous test function.}

\item{task}{Asynchronous function to call repeatedly.}

\item{...}{Arguments to pass to \code{task}.}
}
\value{
Deferred value, that is resolved when the iteration is done.
}
\description{
Repeatedly call task until it its test function returns \code{TRUE}
}
\examples{
## Keep calling until it "returns" a number less than < 0.1
calls <- 0
number <- Inf
synchronise(async_until(
  function() number < 0.1,
  function() {
    calls <<- calls + 1
    number <<- runif(1)
  }
))
calls
}
\seealso{
Other async control flow: 
\code{\link{async_backoff}()},
\code{\link{async_reflect}()},
\code{\link{async_retry}()},
\code{\link{async_retryable}()},
\code{\link{async_sequence}()},
\code{\link{async_try_each}()},
\code{\link{async_whilst}()}
}
\concept{async control flow}
