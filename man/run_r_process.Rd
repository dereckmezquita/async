% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r-process.R
\name{run_r_process}
\alias{run_r_process}
\title{Asynchronous call to an R function, in a background R process}
\usage{
run_r_process(
  func,
  args = list(),
  libpath = .libPaths(),
  repos = c(getOption("repos"), c(CRAN = "https://cloud.r-project.org")),
  cmdargs = c("--no-site-file", "--slave", "--no-save", "--no-restore"),
  system_profile = FALSE,
  user_profile = FALSE,
  env = callr::rcmd_safe_env()
)
}
\arguments{
\item{func}{Function object to call in the new R process.
The function should be self-contained and only refer to
other functions and use variables explicitly from other packages
using the \code{::} notation. By default the environment of the function
is set to \code{.GlobalEnv} before passing it to the child process.
(See the \code{package} option if you want to keep the environment.)
Because of this, it is good practice to create an anonymous
function and pass that to \code{callr}, instead of passing
a function object from a (base or other) package. In particular

\if{html}{\out{<div class="sourceCode">}}\preformatted{r(.libPaths)
}\if{html}{\out{</div>}}

does not work, because \code{.libPaths} is defined in a special
environment, but

\if{html}{\out{<div class="sourceCode">}}\preformatted{r(function() .libPaths())
}\if{html}{\out{</div>}}

works just fine.}

\item{args}{Arguments to pass to the function. Must be a list.}

\item{libpath}{The library path.}

\item{repos}{The \code{repos} option. If \code{NULL}, then no
\code{repos} option is set. This options is only used if
\code{user_profile} or \code{system_profile} is set \code{FALSE},
as it is set using the system or the user profile.}

\item{cmdargs}{Command line arguments to pass to the R process.
Note that \code{c("-f", rscript)} is appended to this, \code{rscript}
is the name of the script file to run. This contains a call to the
supplied function and some error handling code.}

\item{system_profile}{Whether to use the system profile file.}

\item{user_profile}{Whether to use the user's profile file.
If this is \code{"project"}, then only the profile from the working
directory is used, but the \code{R_PROFILE_USER} environment variable
and the user level profile are not. See also "Security considerations"
below.}

\item{env}{Environment variables to set for the child process.}
}
\description{
Start a background R process and evaluate a function call in it.
It uses \link[callr:r_process]{callr::r_process} internally.
}
\examples{
\dontrun{
afun <- function() {
  run_r_process(function() Sys.getpid())
}
synchronise(afun())
}
}
