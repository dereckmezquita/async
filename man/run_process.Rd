% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process.R
\name{run_process}
\alias{run_process}
\title{Asynchronous external process execution}
\usage{
run_process(
  command = NULL,
  args = character(),
  error_on_status = TRUE,
  wd = NULL,
  env = NULL,
  windows_verbatim_args = FALSE,
  windows_hide_window = FALSE,
  encoding = "",
  ...
)
}
\arguments{
\item{command}{Character scalar, the command to run. If you are
running \code{.bat} or \code{.cmd} files on Windows, make sure you read the
'Batch files' section in the \link[processx]{process} manual page.}

\item{args}{Character vector, arguments to the command.}

\item{error_on_status}{Whether to reject the referred value if the
program exits with a non-zero status.}

\item{wd}{Working directory of the process. If \code{NULL}, the current
working directory is used.}

\item{env}{Environment variables of the child process. If \code{NULL},
the parent's environment is inherited. On Windows, many programs
cannot function correctly if some environment variables are not
set, so we always set \code{HOMEDRIVE}, \code{HOMEPATH}, \code{LOGONSERVER},
\code{PATH}, \code{SYSTEMDRIVE}, \code{SYSTEMROOT}, \code{TEMP}, \code{USERDOMAIN},
\code{USERNAME}, \code{USERPROFILE} and \code{WINDIR}. To append new environment
variables to the ones set in the current process, specify
\code{"current"} in \code{env}, without a name, and the appended ones with
names. The appended ones can overwrite the current ones.}

\item{windows_verbatim_args}{Whether to omit the escaping of the
command and the arguments on windows. Ignored on other platforms.}

\item{windows_hide_window}{Whether to hide the window of the
application on windows. Ignored on other platforms.}

\item{encoding}{The encoding to assume for \code{stdout} and
\code{stderr}. By default the encoding of the current locale is
used. Note that \code{processx} always reencodes the output of
both streams in UTF-8 currently.}

\item{...}{Extra arguments are passed to \code{process$new()}, see
\link[processx]{process}. Note that you cannot pass \code{stout} or \code{stderr} here,
because they are used internally by \code{run()}. You can use the
\code{stdout_callback}, \code{stderr_callback}, etc. arguments to manage
the standard output and error, or the \link[processx]{process} class directly
if you need more flexibility.}
}
\value{
Deferred object.
}
\description{
Start an external process in the background, and report its completion
via a deferred.
}
\examples{
\dontrun{
afun <- function() {
  run_process("ls", "-l")$
    then(function(x) strsplit(x$stdout, "\r?\n")[[1]])
}
synchronise(afun())
}
}
\concept{asynchronous external processes}
