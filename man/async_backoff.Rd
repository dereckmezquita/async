% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/backoff.R
\name{async_backoff}
\alias{async_backoff}
\title{Retry an asynchronous function with exponential backoff}
\usage{
async_backoff(
  task,
  times = Inf,
  time_limit = Inf,
  backoff_callback = NULL,
  ...
)
}
\arguments{
\item{task}{An asynchronous function.}

\item{times}{Maximum number of tries.}

\item{time_limit}{Maximum number of seconds to try.}

\item{backoff_callback}{If not \code{NULL} then a callback function to
calculate waiting time, after the \code{i}the try. \code{i} is passed as an
argument. If \code{NULL}, then the default is used, which is a uniform
random number of seconds between 1 and 2^i.}

\item{...}{Arguments to pass to \code{task}.}
}
\value{
Deferred value for the operation with retries.
}
\description{
Keeps trying until the function's deferred value resolves without
error, or \code{times} tries have been performed, or \code{time_limit} seconds
have passed since the start of the first try.
}
\examples{
\donttest{
afun <- function() {
  wait_100_ms <- function(i) 0.1
  async_backoff(
    function() if (runif(1) < 0.8) stop("nope") else "yes!",
    times = 5,
    backoff_callback = wait_100_ms
  )
}

# There is a slight chance that it fails
tryCatch(synchronise(afun()), error = function(e) e)
}
}
\seealso{
Other async control flow: 
\code{\link{async_reflect}()},
\code{\link{async_retryable}()},
\code{\link{async_retry}()},
\code{\link{async_sequence}()},
\code{\link{async_try_each}()},
\code{\link{async_until}()},
\code{\link{async_whilst}()}
}
\concept{async control flow}
